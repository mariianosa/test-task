{% liquid
  assign p = product | default: closest.product
  assign refs = null
  if p and p.metafields.custom and p.metafields.custom.accordion_items != blank
    assign refs = p.metafields.custom.accordion_items.value
  endif
%}

{%- capture _rendered_items -%}
  {%- for entry in refs -%}
    {%- assign title = entry.accordion_title.value
      | default: entry.accordion_title
      | default: entry.fields.accordion_title.value -%}

    {%- capture content_html -%}
      {%- if entry.accordion_content -%}
        {{ entry.accordion_content | metafield_tag }}
      {%- elsif entry.fields and entry.fields.accordion_content -%}
        {{ entry.fields.accordion_content | metafield_tag }}
      {%- endif -%}
    {%- endcapture -%}

    {%- assign content_stripped = content_html | strip -%}
    {%- if title != blank and content_stripped != blank -%}
      {% assign ctrl_id = 'acc-' | append: section.id | append: '-' | append: forloop.index %}
      <div class="p-accordion__item">
        <button class="p-accordion__trigger"
                aria-expanded="false"
                aria-controls="{{ ctrl_id }}"
                id="{{ ctrl_id }}-btn"
                type="button">
          <span class="p-accordion__title">{{ title }}</span>
          <span class="p-accordion__icon" aria-hidden="true">▾</span>
        </button>
        <div class="p-accordion__panel"
             id="{{ ctrl_id }}"
             role="region"
             aria-labelledby="{{ ctrl_id }}-btn"
             hidden>
          <div class="p-accordion__content rte">
            <div class="p-accordion__text" data-lines="5">
              {{ content_html }}
            </div>
            <button class="p-accordion__more" type="button" aria-expanded="false" hidden>…</button>
          </div>
        </div>
      </div>
    {%- endif -%}
  {%- endfor -%}
{%- endcapture -%}

{%- assign _rendered_items_stripped = _rendered_items | strip -%}
{%- if _rendered_items_stripped != blank -%}
  <section class="p-accordion-section" data-allow-multiple="{{ section.settings.allow_multiple }}">
    {% if section.settings.heading != blank %}
      <h2 class="p-accordion__heading">{{ section.settings.heading }}</h2>
    {% endif %}
    <div class="p-accordion" id="p-accordion-{{ section.id }}">
      {{ _rendered_items }}
    </div>
  </section>

  <style>
    .p-accordion-section {
      margin-block: 24px;
      margin: 20px 63px;
    }
    .p-accordion__heading {
      margin-bottom: 12px;
      font-size: 1.25rem;
      text-align: center;
    }
    .p-accordion-section .p-accordion {
      max-width: 820px;
      margin-inline: auto;
    }

    .p-accordion__trigger {
      margin: auto;
      width: 80%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 14px 0;
      background: none;
      border: 0;
      cursor: pointer;
    }
    .p-accordion__icon {
      transition: transform 0.2s ease;
    }
    .p-accordion__trigger[aria-expanded='true'] .p-accordion__icon {
      transform: rotate(180deg);
    }

    .p-accordion__panel {
      padding: 3px 125px 12px;
    }
    .p-accordion__panel[hidden] {
      display: none !important;
    }

    .p-accordion__text {
      overflow: visible;
    }

    @media (max-width: 750px) {
      .p-accordion__text.is-clamped {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      .p-accordion__more {
        display: inline-flex;
        align-items: center;
        border: 0;
        background: none;
        cursor: pointer;
        font-size: 16px;
        line-height: 1;
        padding: 0;
      }
      .metafield-rich_text_field p {
        font-size: 9px;
      }
      .p-accordion__panel {
        padding: 3px 58px 12px;
      }
    }
  </style>

  <script>
    (() => {
      const container = document.getElementById('p-accordion-{{ section.id }}');
      if (!container) return;

      const sectionEl = container.closest('.p-accordion-section');
      const allowMultiple = sectionEl && sectionEl.dataset.allowMultiple === 'true';
      const mq = window.matchMedia('(max-width: 750px)');

      function initClampFor(panel) {
        const wrap = panel.querySelector('.p-accordion__content');
        if (!wrap) return;
        const text = wrap.querySelector('.p-accordion__text');
        const more = wrap.querySelector('.p-accordion__more');
        if (!text || !more) return;

        text.classList.remove('is-clamped');
        text.style.removeProperty('-webkit-line-clamp');
        more.hidden = true;
        more.setAttribute('aria-expanded', 'false');

        if (!mq.matches) return;

        const lines = Number(text.dataset.lines || 5);
        text.classList.add('is-clamped');
        text.style.webkitLineClamp = String(lines);
        requestAnimationFrame(() => {
          const needClamp = text.scrollHeight > text.clientHeight + 1;
          more.hidden = !needClamp;
        });

        more.onclick = (ev) => {
          ev.stopPropagation();
          text.classList.remove('is-clamped');
          text.style.removeProperty('-webkit-line-clamp');
          more.hidden = true;
          more.setAttribute('aria-expanded', 'true');
        };
      }

      container.addEventListener('click', (e) => {
        const btn = e.target.closest('.p-accordion__trigger');
        if (!btn || !container.contains(btn)) return;

        const item = btn.closest('.p-accordion__item');
        const panel = item && item.querySelector('.p-accordion__panel');
        if (!panel) return;

        const isOpen = btn.getAttribute('aria-expanded') === 'true';

        if (!allowMultiple) {
          container.querySelectorAll('.p-accordion__trigger[aria-expanded="true"]').forEach((openBtn) => {
            if (openBtn !== btn) {
              openBtn.setAttribute('aria-expanded', 'false');
              const p = document.getElementById(openBtn.getAttribute('aria-controls'));
              if (p) p.hidden = true;
            }
          });
        }

        btn.setAttribute('aria-expanded', String(!isOpen));
        panel.hidden = isOpen;
        if (!isOpen) initClampFor(panel);
      });

      container.querySelectorAll('.p-accordion__panel:not([hidden])').forEach(initClampFor);

      function recheckOpenPanels() {
        container.querySelectorAll('.p-accordion__panel:not([hidden])').forEach(initClampFor);
      }
      if (mq.addEventListener) mq.addEventListener('change', recheckOpenPanels);
      else mq.addListener(recheckOpenPanels);
    })();
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Product accordion",
  "tag": "section",
  "settings": [
    { "type": "text", "id": "heading", "label": "Heading", "default": "FAQ" },
    { "type": "checkbox", "id": "allow_multiple", "label": "Allow open few", "default": false }
  ],
  "presets": [{ "name": "Product accordion (metaobject)" }]
}
{% endschema %}
